{
  "name": "combyne",
  "description": "Templating that works *hopefully* the way you'd expect.",
  "version": "0.2.1",
  "author": {
    "name": "Tim Branyen",
    "email": "tim@tabdeveloper.com",
    "url": "http://twitter.com/tbranyen"
  },
  "main": "./combyne.js",
  "devDependencies": {
    "nodeunit": "*"
  },
  "engines": {
    "node": "*"
  },
  "readme": "combyne.js: A template engine that works the way you'd expect.\n==============================================================\n\nGetting started\n--------------\n\n###Browser###\n\nDownload: [Production](http://cloud.github.com/downloads/tbranyen/combyne.js/combyne.min.js) or [Development](http://cloud.github.com/downloads/tbranyen/combyne.js/combyne.js)\n\nInclude: `<script src=\"combyne.js\"></script>`\n\nCompatibility: (Desktop) IE 9+, Chrome 13+, Opera 11+, FireFox 3.6+, Safari 5+, (Mobile) Android Browser 2.3.4+, Opera 9.80+, FireFox Beta, iPad\n\nFile size: 2.7KB when serving `Production version` with GZip\n\n###Node.js###\n\nTo install `combyne`, you can clone this repository to your `node_modules`\nfolder or use the fantastic `NPM`:\n\n``` bash\nnpm install combyne\n```\n\nThen simply `require` it in your projects to start using\n\n``` javascript\nvar combyne = require('combyne');\n```\n\nBasic usage\n-----------\n\n``` javascript\nvar tmpl = combyne('{{test}}');\ntmpl.render({ test: 'lol' }); // lol\n```\n\nFeatures\n-------------\n\n`combyne` works by parsing your template into a stack and rendering data.\n\n###Single line comments###\n\n``` javascript\nvar template = 'test {%-- single line comment --%}';\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render();\n/// output == 'test '\n```\n\n####Block comments####\n\n``` javascript\nvar template = 'test {%-- line 1\\n\\\n                          line 2\\n\\\n                     --%}';\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render();\n/// output == 'test '\n```\n\n###Custom delimiters###\n\n``` javascript\nvar template = '[[lol]]';\nvar context = { lol: 'test' };\n\nvar tmpl = combyne(template);\ntmpl.delimiters = {\n  START_PROP: '[[',\n  END_PROP: ']]'\n};\n\nvar output = tmpl.render(context);\n/// output = 'test'\n```\n\n###Replacing template variables###\n\n``` javascript\nvar template = '{{lol}}';\nvar context = { lol: 'test' };\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render(context);\n/// output == 'test'\n```\n\n###Using filters on variables###\n\n``` javascript\nvar template = '{{test|reverse}}';\nvar context = { lol: 'test' };\n\nvar tmpl = combyne(template);\ntmpl.filters.add('reverse', function(val) {\n  return val.split('').reverse().join('');\n});\n\nvar output = tmpl.render(context);\n/// output == 'tset'\n```\n\n####Chaining filters on variables####\n\n``` javascript\nvar template = '{{test|reverse|toUpper}}';\nvar context = { lol: 'test' };\n\nvar tmpl = combyne(template);\ntmpl.filters.add('reverse', function(val) {\n  return val.split('').reverse().join('');\n});\ntmpl.filters.add('toUpper', function(val) {\n  return val.toUpperCase();\n});\n\nvar output = tmpl.render(context);\n/// output == 'TSET'\n```\n\n###Conditionals###\n\nInstead of being *logic-less*, `combyne` doesn't make any assumptions and\nallows you to do things like `if/elsif/else` with simple conditionals,\nsuch as `if something == somethingElse` or `if not something`.  All data \ntypes will be coerced to Strings except for Numbers.\n\n``` javascript\nvar template = '{%if not test%}why not?{%endif%}';\nvar context = { test: false };\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render(context);\n/// output == 'why not?'\n```\n\nor a more complicated example...\n\n``` javascript\nvar template = '{%if test == \"hello\"%}goodbye!{%else%}hello!{%endif%}';\nvar context = { test: 'hello' };\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render(context);\n/// output == 'goodbye!'\n```\n\n###Iterating arrays###\n\n*Will not work on array-like objects, such as arguments or NodeList, coerce with\n`Array.prototype.slice.call(obj);`*\n\n``` javascript\nvar template = '{%each test%}{{.}} {%endeach%}';\nvar context = { test: [1,2,3,4] };\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render(context);\n/// output == '1 2 3 4 '\n```\n\n####You can change the iterated name within loops as well####\n\n``` javascript\nvar template = '{%each arr as _%}{{_}}{%endeach%}';\nvar context = { arr: [1,2,3] };\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render(context);\n/// output = '123'\n```\n\n###Iterating objects###\n\n``` javascript\nvar template = '{%each test as key val%}the {{key}} is {{val}}{%endeach%}';\nvar context = {\n  test: {\n    hello: 'lol'\n  }\n};\n\nvar tmpl = combyne(template);\n\nvar output = tmpl.render(context);\n/// output == 'the hello is lol'\n```\n\n###Partials###\n\n``` javascript\nvar template = '{{test}} {%partial test%}';\nvar context = { test: \"hello\" };\n\nvar tmpl = combyne(template);\n\ntmpl.partials.add('test', '{{name}}', {\n  name: 'you'\n});\n\nvar output = tmpl.render(context);\n/// output == 'hello you'\n```\n\n\nRunning unit tests\n------------------\n\n###Browser###\n\nOpen `test/test.html` in your browser of choice.\n\n###Node.js###\n\nRun the follow command to fetch the `Node.js` dependencies.\n\n``` bash\nnpm install\n```\n\nThen run the following command\n\n``` bash\nmake test\n```\n\nLicense\n-------\n\nCopyright (c) 2011 Tim Branyen\n\nThis file is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License, version 2,\nas published by the Free Software Foundation.\n\nIn addition to the permissions in the GNU General Public License,\nthe authors give you unlimited permission to link the compiled\nversion of this file into combinations with other programs,\nand to distribute those combinations without any restriction\ncoming from the use of this file.  (The General Public License\nrestrictions do apply in other respects; for example, they cover\nmodification of the file, and distribution when not linked into\na combined executable.)\n\nThis file is distributed in the hope that it will be useful, but\nWITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\nGeneral Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; see the file COPYING.  If not, write to\nthe Free Software Foundation, 51 Franklin Street, Fifth Floor,\nBoston, MA 02110-1301, USA.\n",
  "readmeFilename": "README.md",
  "_id": "combyne@0.2.1",
  "dist": {
    "shasum": "30c49785b4124ced3ec0f7be11160900edf80221"
  },
  "_from": "combyne@",
  "_resolved": "https://registry.npmjs.org/combyne/-/combyne-0.2.1.tgz"
}
